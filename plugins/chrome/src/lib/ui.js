// Generated by CoffeeScript 1.6.2
(function() {
  jQuery(function($) {
    return $.langsceneUi = {
      setup: function() {
        var _this = this;

        console.log('init langscene ui');
        this._createUi();
        $(window).resize(this.onWindowUpdate.bind(this));
        this.onWindowUpdate();
        this.$uiLangScene.find(".switch").click(function() {
          _this.togglePickWord();
          return false;
        });
        $.wordpicker.on('picked', function(word, $event) {
          if (!word) {
            return;
          }
          _this.pickedWord = word;
          $.wordpicker.disable();
          _this.$uiPickupWordBtn.text(word);
          _this.$uiPickupWord.show().css({
            top: $event.pageY - _this.$uiPickupWord.outerHeight(),
            left: $event.pageX - _this.$uiPickupWord.outerWidth() / 2
          });
          return _this.pickedUp = true;
        });
        $(document).click(function(event) {
          _this.$uiPickupWord.hide();
          if (!_this.pickedUp) {
            return;
          }
          _this.pickedUp = false;
          _this.$uiLangScene.find('.switch-animate').removeClass('switch-on').addClass('switch-off');
          if (event.originalEvent.srcElement === _this.$uiPickupWordBtn[0]) {
            console.log('bingo!', _this.pickedWord);
            _this.$uiWordPanel.find('.langscene-query input').val(_this.pickedWord);
            _this.query();
            _this.openWordPanel();
          }
          return event.originalEvent.returnValue = false;
        });
        $(document).keydown(function(event) {
          if (event.altKey && event.keyCode === 80) {
            _this.togglePickWord();
          }
          if (event.altKey && event.keyCode === 73) {
            return _this.toggleWordPanel();
          }
        });
        return this.$uiWordPanel.on('click', 'ul li.word', function(event) {
          var $des, _ref, _ref1;

          $des = $(event != null ? (_ref = event.originalEvent) != null ? _ref.srcElement : void 0 : void 0).data('$li.des');
          console.log('???', $des, $(event != null ? (_ref1 = event.originalEvent) != null ? _ref1.srcElement : void 0 : void 0).data);
          _this.$uiWordPanel.find('ui li.des').not($des).hide();
          if ($des != null) {
            $des.toggle();
          }
          return _this.onWindowUpdate();
        });
      },
      _createUi: function() {
        var _this = this;

        this.$uiLangScene = $("<div id='langscene-ui'>\n    <div class=\"switch has-switch\"><div class=\"switch-off switch-animate\"><span class=\"switch-left\">ON</span><label>&nbsp;</label><span class=\"switch-right\">PICK</span></div></div>\n    <span class=\"wordpad-switch fui-arrow-left\"></span>\n</div>").appendTo(document.body).css({
          position: 'fixed',
          'z-index': 10000
        });
        this.$uiLangScene.find('.wordpad-switch').click(function() {
          console.log('switch');
          if (_this.wordPanelOpened) {
            return _this.closeWordPanel();
          } else {
            return _this.openWordPanel();
          }
        });
        this.$uiPickupWord = $("<div class='langscene-pickup-word'>\n<div class='langscene-pickup-btn'></div>\n</div>").appendTo(document.body);
        this.$uiPickupWordBtn = this.$uiPickupWord.find('.langscene-pickup-btn');
        this.$uiWordPanel = $("<div class='langscene-wordpanel'>\n    <form class='langscene-query'>\n        <input type='text' >\n        <button class=\"query-btn\">Q</button>\n    </form>\n    <ul class=\"word-list\"></ul>\n</div>").appendTo(document.body);
        this.wordPanelOpened = false;
        return this.$uiWordPanel.find('form').submit(function(event) {
          event.originalEvent.returnValue = false;
          _this.query();
          return false;
        });
      },
      onWindowUpdate: function() {
        this.$uiLangScene.css({
          left: $(window).outerWidth() - this.$uiLangScene.outerWidth() - 10,
          top: $(window).outerHeight() - this.$uiLangScene.outerHeight() - 50
        });
        return this.$uiWordPanel.css({
          left: $(window).outerWidth() - (this.wordPanelOpened ? this.$uiWordPanel.outerWidth() : 0),
          top: $(window).outerHeight() - this.$uiWordPanel.outerHeight() - this.$uiLangScene.outerHeight() - 50 - 5
        });
      },
      togglePickWord: function() {
        if ($.wordpicker.picking) {
          this.$uiLangScene.find(".switch").find('.switch-animate').removeClass('switch-on').addClass('switch-off');
          return $.wordpicker.disable();
        } else {
          this.$uiLangScene.find(".switch").find('.switch-animate').removeClass('switch-off').addClass('switch-on');
          return $.wordpicker.enable();
        }
      },
      openWordPanel: function() {
        if (this.wordPanelOpened) {
          return;
        }
        this.wordPanelOpened = true;
        this.$uiWordPanel.animate({
          left: $(window).width() - this.$uiWordPanel.width() - 5
        });
        this.$uiLangScene.find('.wordpad-switch').removeClass('fui-arrow-left').addClass('fui-arrow-right');
        return this.$uiWordPanel.find('.langscene-query input').focus();
      },
      closeWordPanel: function() {
        if (!this.wordPanelOpened) {
          return;
        }
        this.wordPanelOpened = false;
        this.$uiWordPanel.animate({
          left: $(window).width()
        });
        return this.$uiLangScene.find('.wordpad-switch').removeClass('fui-arrow-right').addClass('fui-arrow-left');
      },
      toggleWordPanel: function() {
        if (this.wordPaenlOpened) {
          return this.closeWordPanel();
        } else {
          return this.openWordPanel();
        }
      },
      query: function() {
        var $li, $lides, word,
          _this = this;

        word = this.$uiWordPanel.find('.langscene-query input').val();
        console.log('query:', word);
        if (!word) {
          return;
        }
        $li = $("<li class='word'>" + word + "</li>").appendTo(this.$uiWordPanel.find('ul.word-list'));
        $lides = $("<li class='des' style='display:none'>loading ...</li>").insertAfter($li);
        $li.data('$li.des', $lides);
        this.onWindowUpdate();
        return $.get("http://dict.qq.com/dict?q=" + word, function(json) {
          var des, html, i, mor, res, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3, _ref4;

          eval("json=" + json);
          html = '';
          console.log(json);
          if (!((_ref = json.local) != null ? _ref.length : void 0)) {
            html = 'not fount this word';
          } else {
            res = json.local[0];
            _ref1 = res.des || [];
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              des = _ref1[_i];
              html += "<p>" + des.p + " " + des.d + "</p>";
            }
            if ((_ref2 = res.mor) != null ? _ref2.length : void 0) {
              html += "<p>";
            }
            _ref3 = res.mor || [];
            for (i = _j = 0, _len1 = _ref3.length; _j < _len1; i = ++_j) {
              mor = _ref3[i];
              if (i) {
                html += ';';
              }
              html += "<span>" + mor.c + ": " + mor.m + "</span>";
            }
            if ((_ref4 = res.mor) != null ? _ref4.length : void 0) {
              html += "</p>";
            }
            html += "<p class=word-links>\n    <a href=\"http://dict.cn/" + word + "\" target=_blank>dict.com</a>\n    <a href=\"http://www.google.com.hk/search?q=" + word + "\" target=_blank>Google</a>\n    <a href=\"http://www.baidu.com/s?wd=" + word + "\" target=_blank>Baidu</a>\n</p>";
          }
          $lides.html(html);
          return _this.onWindowUpdate();
        });
      },
      pickedUp: false,
      pickedWord: void 0
    };
  });

}).call(this);
